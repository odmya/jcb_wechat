<style>

.top-margin{
  margin:50px;
}
.weui-article__p{

    text-align: left;
    font-size:12px;
    padding:0px 5px;
    color:blue;
    text-decoration: underline;
}
.roottext{
    overflow:hidden; 
    text-overflow:ellipsis;
    white-space:nowrap; 
    }
.navbar .weui-tab__content{padding-top:5px;}
</style>
<template>

    <view class="navbar page">
        <view class="page__bd">
            <view class="weui-tab">
                <view class="weui-navbar">
                    <view wx:for="{{tabs}}" wx:key="*this" id="{{index}}" class="weui-navbar__item {{activeIndex == index ? 'weui-bar__item_on' : ''}}" @tap="tabClick">
                        <view class="weui-navbar__title">{{item}}</view>
                    </view>
                    <view class="weui-navbar__slider" style="left: {{sliderLeft}}px; transform: translateX({{sliderOffset}}px); -webkit-transform: translateX({{sliderOffset}}px);"></view>
                </view>
                <view class="weui-tab__panel">
                    <view class="weui-tab__content" hidden="{{activeIndex != 0}}">
                        <view wx:if="{{wordrisklist.length}}">
                             <repeat for="{{ wordrisklist }}" key="id" index="index" item="wordrisk">
                                <view class="weui-article__p">
                                   <navigator url="/pages/words/query?word={{ wordrisk.word }}" class="weui-media-link" hover-class="weui-cell_active">
                                     <view> {{wordrisk.word}} </view>
                                      <view class="weui-article__p">
                                           <repeat for="{{ wordrisk.explain }}" key="id" index="cixing" item="explain">{{cixing}} {{explain}}  </repeat>
                                      </view>
                                   </navigator>
                                </view>

                            </repeat>
                        </view>
                        <view wx:else>
                         
                         <view class="weui-article__p">
                          <view>Tip: 下拉刷新</view>
                        <view>请先在设置中添加生词本！建议单词词汇较少会员请选择 “柯林斯Cobuild词频” ，柯林斯Cobuild词频难度递增，五星最容易，零星最难， 五星词汇/四星词汇/三星词汇  两星词汇/一星词汇/零星词汇</view></view>
                        </view>
                    </view>
                    <view class="weui-tab__content" hidden="{{activeIndex != 1}}">
                        
                        <repeat for="{{ wordreviewlist }}" key="id" index="index" item="wordreview">
                              <view class="weui-article__p">
                                 <navigator url="/pages/words/query?word={{ wordreview.word }}" class="weui-media-link" hover-class="weui-cell_active">
                                   <view> {{wordreview.word}} </view>
                                    <view class="weui-article__p">
                                         <repeat for="{{ wordreview.explain }}" key="id" index="cixing" item="explain">{{cixing}} {{explain}}  </repeat>
                                    </view>
                                 </navigator>
                              </view>

                        </repeat>

                    </view>
                    <view class="weui-tab__content" hidden="{{activeIndex != 2}}">
                              <view wx:if="{{setbundle}}">
      
                                    <view class="weui-article__p">
                                         <picker @change="bindPickerChange" value="{{index}}" range="{{bundles}}">
                                              <button type="default">选择生词本</button>
                                          </picker>
                                    </view>
          

                              </view>
                              <view wx:else>
                                <view  >
  
                                        <view class="weui-cells__title">设置</view>

                                        <view class="weui-cells weui-cells_after-title">
                                          <view class="weui-cells__title">{{wordbundle.level_base}}</view>
                                          <view class="weui-cell weui-cell_input">
                                              <view class="weui-cell__hd">
                                                  <view class="weui-label">每天单词</view>
                                              </view>
                                              <view class="weui-cell__bd">
                                                  <input class="weui-input" value="{{maxsize}}" placeholder="请输入单词数" @input="inputTyping"/>
                                              </view>
                                          </view>

                                          <view class="weui-btn-area">
                                              <button class="weui-btn" type="primary" @tap="updatebundle">确定</button>
                                          </view>
                                          <view class="weui-btn-area">
                                              <button class="weui-btn" type="warn" @tap="deletebundle">删除</button>
                                          </view>

                                        </view>
                                        
                                </view>
                              </view>

                    </view>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import api from '@/utils/api'
    const sliderWidth = 96 // 需要设置slider的宽度，用于计算中间位置

    export default class WordHistory extends wepy.page {


        data = {
            tabs: ['今日新单词', '复习中单词', '设置'],
            activeIndex: 0,
            sliderOffset: 0,
            sliderLeft: 0,
            qianzhui:'',
            houzhui:'',
            cizhui:'',
            maxsize:'',
            wordrisklist:'',
            wordreviewlist:'',
            wordbundle: '',
            setbundle:false,
            userinfomation:'',
            bundles:[],
            valuelist:[],
            index: 0
        }

        props = {
          userInfo: ''
      }

        methods = {
            tabClick (e) {
                this.sliderOffset = e.currentTarget.offsetLeft
                this.activeIndex = e.currentTarget.id
            },
            async deletebundle() {
              // 删除确认
              let res = await wepy.showModal({
                title: '确认删除',
                content: '您确认要删除吗',
                confirmText: '删除',
                cancelText: '取消'
              })

              // 用户点击取消后返回
              if (!res.confirm) {
                return
              }

              // 调用接口删除话题
              let deleteResponse = await api.authRequest({
                url: 'deletebundle',
                method: 'DELETE',
                data: {
                                user_id: this.userinfomation.id,
                                bundle_id: this.wordbundle.id,
                              }
                
              })

              // 删除成功，给出提示
              if (deleteResponse.statusCode === 204) {
                wepy.showToast({
                  title: '删除成功',
                  icon: 'success'
                })
                this.setbundle =true
                let bundlelistResponse = await api.request({
                url: 'bundlelist'
                })
                let setbundle = bundlelistResponse.data.level_bases
                let tmplist =[]
                let valuelist =[]
                console.log(setbundle)
                setbundle.forEach(function (newsitem) {
                  //tmplist[newsitem.id] = newsitem.level_bases
                  tmplist.push(newsitem.level_bases)
                  valuelist.push(newsitem.id)
                  
                })
                this.bundles = tmplist
                this.valuelist = valuelist
                this.$apply() 
              }
            },

            inputTyping(e){
              this.maxsize = e.detail.value
            },

            async updatebundle(e){
              
              //console.log("user_id: " + this.userinfomation.id +'bundle_id'+ this.wordbundle.id + 'maxsize:'+ this.maxsize)
              let updatebundleResponse = await api.request({
                              url: 'updatebundle',
                              method: 'POST',
                              data: {
                                user_id: this.userinfomation.id,
                                bundle_id: this.wordbundle.id,
                                maxsize: this.maxsize
                              }
                            })
              this.wordbundle = updatebundleResponse.data.data
             this.maxsize = this.wordbundle.maxsize
             this.$apply() 

            },
            async bindPickerChange(e){
              this.userinfomation = wepy.getStorageSync('userinfomini')
              console.log("user_id: " + this.userinfomation.id +'level_base_id'+ this.valuelist[e.detail.value])
               let newbundleResponse = await api.request({
                              url: 'newbundle',
                              method: 'POST',
                              data: {
                                user_id: this.userinfomation.id,
                                level_base_id: this.valuelist[e.detail.value],
                              }
                            })
               this.wordbundle = newbundleResponse.data.data
               this.maxsize = this.wordbundle.maxsize
               this.setbundle =false
              console.log('picker发送选择改变，携带值为', e.detail.value)

              console.log('name : ', this.valuelist[e.detail.value])
              this.$apply()
            }
        }

        async getRoots(){

            let wordrisklistResponse = await api.request({
            url: 'wordrisklist',
            data: {
              user_id: this.userinfomation.id
            }
          })
           
            
          this.wordrisklist = wordrisklistResponse.data.data
          this.$apply()

          let wordreviewlistResponse = await api.request({
            url: 'wordreviewlist',
            data: {
              user_id: this.userinfomation.id
            }
          })
          this.wordreviewlist = wordreviewlistResponse.data.data
          this.$apply()
          let wordsetttingResponse = await api.request({
            url: 'wordsetting',
            data: {
              user_id: this.userinfomation.id
            }
          })
          let wordsettting = wordsetttingResponse
          if(wordsettting.data.data){
            this.wordbundle = wordsettting.data.data
            this.maxsize = this.wordbundle.maxsize
          }else{
            this.setbundle =true
            let bundlelistResponse = await api.request({
            url: 'bundlelist'
            })
            let setbundle = bundlelistResponse.data.level_bases
            let tmplist =[]
            let valuelist =[]
            console.log(setbundle)
            setbundle.forEach(function (newsitem) {
              //tmplist[newsitem.id] = newsitem.level_bases
              tmplist.push(newsitem.level_bases)
              valuelist.push(newsitem.id)
              
            })
            this.bundles = tmplist
            this.valuelist = valuelist
          }
          
          this.$apply()
          

        }



        async onLoad () {
            let res = await wepy.getSystemInfo()
            this.userinfomation = wepy.getStorageSync('userinfomini')

            this.getRoots()

            this.sliderLeft = (res.windowWidth / this.tabs.length - sliderWidth) / 2
            this.sliderOffset = res.windowWidth / this.tabs.length * this.activeIndex
        }
    }
</script>
