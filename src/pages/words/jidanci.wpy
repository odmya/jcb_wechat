
<style>
page{
	background-color: #FFFFFF;
}

.avatar {
	width: 17px;
	height: 17px;

}
.page__hd{
	padding: 5px 10px;
	text-align: center;
}
.weui-article__section{
	padding: 5px;
}
.weui-article__section1{
	padding-bottom: 2px;
}
.weui-article__p,.page__desc{
	font-size:12px;
	color:#888888;

}

.weui-article__infomation{
	font-size:12px;
	color:#888888;
	align-content: left;

}

.weui-flex__item{
	text-align: left;

}
.weui-article__h3{
	font-size:15px;
}
.changezindex{
	z-index: 1000;
}
.weui-media-link{
	color:blue;
	font-size: 14px;
}
.wordwaning{
	color:blue;
	size: 10px;
	text-align: left;
}
.section_word{

}

.top-margin{
	margin:50px;
}
.weui-article__p{

	text-align: left;
	font-size:12px;
	padding:0px 5px;
}
.roottext{
	overflow:hidden; 
	text-overflow:ellipsis;
	white-space:nowrap; 
}
.level_base_title{
	text-align: left;
	font-size:12px;
}
.level_base_sub{
	text-align: left;
	font-size:10px;
}
.correct_answer{

}
.navbar .weui-tab__content{padding-top:5px;}

</style>
<template>
	<view class="page weui-article__infomation" animation="{{animationData}}">
		<view wx:if="{{ loggedIn }}">
			<view wx:if="{{ShowNewWord}}">
				<view class="weui-progress">
	                <view class="weui-progress__bar">
	                    <progress percent="{{ wordpercent }}" stroke-width="3"/>
	                </view>

            	</view>
				<view class="page__hd">
					<view class="page__title">{{ currentdata.word }}</view>
					<view><button class="weui-btn mini-btn" type="default" size="mini" @tap="dancizhan" data-path="{{currentdata.word_id}}" size="mini">认识不再出现</button></view>
					<view class="weui-flex">
						<repeat for="{{ currentdata.voice }}" key="id" index="index" item="voice">

							<view class="weui-flex__item" data-path="{{voice.path}}" @tap="playmp3"> {{voice.symbol}}<image class="avatar"  src="../../images/sound.png" /> </view>
						</repeat>
					</view>

					<view class="weui-article__section" wx:if="{{ currentdata.image.image }}"><image src="https://www.jciba.cn/uploads/images/words/{{ currentdata.image.image }}" /> </view>

					<view class="weui-article__section">
						<view class="weui-article__section1">
							<repeat for="{{ currentdata.explain }}" key="id" index="index" item="explain">{{index}}: {{explain}}  </repeat>
						</view>



						<view class="weui-article__section1" wx:if="{{ currentdata.tips.length }}">

							<view class="weui-panel__ft">
								<view class="weui-cell weui-cell_access weui-cell_link">
									<view class="weui-cell__bd" @tap="tip">记忆窍门</view>
									<view class="weui-cell__ft weui-cell__ft_in-access" @tap="tip"></view>
								</view>


								<view wx:if="{{closetip}}">
									<repeat for="{{ currentdata.tips }}" key="id" index="index" item="tip">
										<view class="weui-article__p">
											{{tip.tip}} 
										</view>

									</repeat>

								</view>
							</view>  


						</view>

						<view class="weui-article__section1" wx:if="{{ currentdata.root.length }}">
							<view class="weui-panel__ft">
								<view class="weui-cell weui-cell_access weui-cell_link">
									<view class="weui-cell__bd" @tap="cigen">词根</view>
									<view class="weui-cell__ft weui-cell__ft_in-access" @tap="tip"></view>
								</view>
								<view wx:if="{{closecigen}}">
									<repeat for="{{ currentdata.root }}" key="id" index="index" item="root">
										<view class="weui-article__p">
											<navigator url="/pages/words/cigen?id={{ root.root.id }}" class="weui-media-link" hover-class="weui-cell_active">
												<view>{{root.root_alias?root.root_alias:root.root.name}} </view>
											</navigator>


											<view> <rich-text nodes="{{root.detail?root.detail:root.root_description}}"></rich-text>  </view>
										</view>

									</repeat>

								</view>
							</view>      
						</view>

						<view class="weui-article__section1" wx:if="{{ currentdata.sentences.length }}">
							<view class="weui-panel__ft">
								<view class="weui-cell weui-cell_access weui-cell_link">
									<view class="weui-cell__bd" @tap="liju">例句</view>
									<view class="weui-cell__ft weui-cell__ft_in-access" @tap="liju"></view>
								</view>
								<view wx:if="{{closeliju}}">
									<repeat for="{{ currentdata.sentences }}" key="id" index="index" item="liju">
										<view class="weui-article__p">
											<view>{{liju.english}} </view>    
											<view>  {{liju.chinese}} --{{liju.quote}} </view>                               
										</view>

									</repeat>

								</view>
							</view>    
						</view>
					</view>
					<view wx:if="{{currentdata}}">
						<form bindsubmit="nextword" report-submit='true' >
						  <button form-type="submit" type="warn" size="mini">学下一个单词</button>
						</form>
					</view>

				</view>
			</view>

			<view wx:if="{{ShowReview}}" class="weui-article__infomation page__hd">
				<view class="weui-progress">
	                <view class="weui-progress__bar">
	                    <progress percent="{{ wordpercent }}" stroke-width="3"/>
	                </view>

     
            	</view>

				<view class="page__title">复习{{ reviewitem.word }}</view>
				<view class="wordwaning"><icon type="info_circle" size="23"></icon> {{  reviewitem.word_review.next_time?reviewitem.word_review.next_time:"一小时后需要及时复习" }}
				<view><button class="weui-btn mini-btn" type="default" size="mini" @tap="dancizhan" data-path="{{reviewitem.word_id}}" size="mini">不再复习</button></view>
				</view>
				
				<view>
					<view class="weui-article__p">
						<repeat for="{{ reviewitem.voice }}" key="id" index="index" item="voice">

							<view class="weui-flex__item" data-path="{{voice.path}}" @tap="playmp3"> {{voice.symbol}}<image class="avatar"  src="../../images/sound.png" /> </view>
						</repeat>
					</view>


					<view class="weui-article__p">
						<radio-group bindchange="radioChange">

								<repeat for="{{ explain_answer }}" key="id" index="index" item="answer">
									<label class="weui-cell weui-check__label">
				                        <radio class="weui-check" value="{{answer.id}}" checked="{{answer.checked}}"/>

				                        <view class="weui-cell__bd {{answer.checked?'correct_answer':''}}">{{answer.explain}}</view>
				                        <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{answer.checked}}">
				                            <icon class="weui-icon-radio" type="success_no_circle" size="16"/>
				                        </view>
			                        </label>
		                    	</repeat>

	
		                </radio-group>

					</view>
					

					<view class="weui-article__p" wx:if="{{ShowExplain}}">
						<view wx:if="{{answertrue}}">
							<icon type="info_circle" size="23" size="23"></icon>回答正确
						</view>
						<view wx:else class="wordwaning">
							<icon type="warn" size="23" color="#F43530"></icon>回答错误
						</view>

						<view style="text-align:center">
							
							<form bindsubmit="nextreview" report-submit='true' >
							  <button form-type="submit" type="warn" size="mini">下一个单词</button>
							</form>

						</view>
						<view wx:if="{{ reviewitem.image.image }}"><image src="https://www.jciba.cn/uploads/images/words/{{ reviewitem.image.image }}" /> </view>
						<view>
							<repeat for="{{ reviewitem.explain }}" key="id" index="index" item="explain">{{index}}: {{explain}}  </repeat>
						</view>
						<view class="weui-article__section1" wx:if="{{ reviewitem.tips.length }}">

							<view class="weui-panel__ft">
								<view class="weui-cell weui-cell_access weui-cell_link">
									<view class="weui-cell__bd" @tap="tip">记忆窍门</view>
									<view class="weui-cell__ft weui-cell__ft_in-access" @tap="tip"></view>
								</view>


								<view wx:if="{{closetip}}">
									<repeat for="{{ reviewitem.tips }}" key="id" index="index" item="tip">
										<view class="weui-article__p">
											{{tip.tip}} 
										</view>

									</repeat>

								</view>
							</view>  


						</view>

						<view class="weui-article__section1" wx:if="{{ reviewitem.root.length }}">
							<view class="weui-panel__ft">
								<view class="weui-cell weui-cell_access weui-cell_link">
									<view class="weui-cell__bd" @tap="cigen">词根</view>
									<view class="weui-cell__ft weui-cell__ft_in-access" @tap="tip"></view>
								</view>
								<view wx:if="{{closecigen}}">
									<repeat for="{{ reviewitem.root }}" key="id" index="index" item="root">
										<view class="weui-article__p">
											<navigator url="/pages/words/cigen?id={{ root.root.id }}" class="weui-media-link" hover-class="weui-cell_active">
												<view>{{root.root_alias?root.root_alias:root.root.name}} </view>
											</navigator>


											<view> <rich-text nodes="{{root.detail?root.detail:root.root_description}}"></rich-text>  </view>
										</view>

									</repeat>

								</view>
							</view>      
						</view>

						<view class="weui-article__section1" wx:if="{{ reviewitem.sentences.length }}">
							<view class="weui-panel__ft">
								<view class="weui-cell weui-cell_access weui-cell_link">
									<view class="weui-cell__bd" @tap="liju">例句</view>
									<view class="weui-cell__ft weui-cell__ft_in-access" @tap="liju"></view>
								</view>
								<view wx:if="{{closeliju}}">
									<repeat for="{{ reviewitem.sentences }}" key="id" index="index" item="liju">
										<view class="weui-article__p">
											<view>{{liju.english}} </view>    
											<view>  {{liju.chinese}} --{{liju.quote}} </view>                               
										</view>

									</repeat>

								</view>
							</view>    
						</view>

						

					</view>

				</view>
			</view>



			<view wx:if="{{ShowNewWord==false&&ShowReview==false}}">
				<wepyCanlendar
				:currentDate.sync="currentDate"
				:hasIconList.sync="hasIconList"
				></wepyCanlendar>

				<view class="weui-cells__title">每天打卡</view>
	            <view class="weui-cells weui-cells_after-title">
	                <navigator url="/pages/words/wordbundle" class="weui-cell weui-cell_access" hover-class="weui-cell_active">
	                    <view class="weui-cell__bd "><view class="level_base_title">{{wordbundle.level_base}}</view><view class="level_base_sub">当前词库学习进度 {{wordbundle.rememberwords}}/{{wordbundle.wordcounts}}</view></view>
	                    <view class="weui-cell__ft weui-cell__ft_in-access">
	                    	切换单词本
						</view>
	                </navigator>
	                <navigator url="" class="weui-cell weui-cell_access" hover-class="weui-cell_active">
	                    <view class="weui-cell__bd level_base_title">今日新单词</view>
	                    <view class="weui-cell__ft weui-cell__ft_in-access"/>
	                </navigator>
	                <navigator url="" class="weui-cell weui-cell_access" hover-class="weui-cell_active">
	                    <view class="weui-cell__bd level_base_title">今日需要复习单词</view>
	                    <view class="weui-cell__ft weui-cell__ft_in-access"/>
	                </navigator>
	            </view>
	          


			</view>

		</view>
		<view wx:else>
			<navigator class="weui-article__p" url="/pages/auth/login">
				<view class="weui-cell__bd">未登录，点击登录，然后选择单词生词本可以开始记忆单词！</view>
				<view class="weui-article__p"> 本程序根据艾宾浩斯记忆法设计完成，每个单词的复习时间参考艾宾浩斯遗忘曲线设置，请及时复习 </view>
				<view class="weui-cell__ft weui-cell__ft_in-access"></view>
			</navigator>
		</view>
	</view>

</template>

<script>
import wepy from 'wepy'
import api from '@/utils/api'
import wepyCanlendar from '../../components/calendar'
	  //import util from '@/utils/util'

	  const sliderWidth = 96 // 需要设置slider的宽度，用于计算中间位置

	  export default class JiDanCi extends wepy.page {

	    components = {
	            wepyCanlendar
	        }

	  	config = {
	  		navigationBarTitleText: '背单词',
	  		enablePullDownRefresh: true
	  	}

	  	data = {
	  	  hasIconList:[],
	      // 话题数据
	      words: '',
	      choose: false,
	      currentidx: '',
	      wordsTwo: [],
	      wordpercent: 0,
	      wordpercentcount:0,
	      wordnewwordcount: 0,
	      wordreviewwordcount: 0,

	      ShowExplain:false,
	      answertrue: false,
	      ReviewWords: null,
	      closetip: true,
	      closecigen:true,
	      closeliju:true,
	      loggedIn: false,
	      ShowReview:false,
	      ShowNewWord: false,
	      userInfo: null,
	      reviewitem: null,
	      currentdata:'',
	      reviewdata: [],
	      answerlist:[],
	      explain_answer:[],
	      animationData: {},
	      innerAudioContext:'',
	      tabs: ['今日新单词', '复习中单词', '设置'],
	      activeIndex: 0,
	      sliderOffset: 0,
	      sliderLeft: 0,
	      qianzhui:'',
	      houzhui:'',
	      cizhui:'',
	      maxsize:'',
	      wordrisklist:'',
	      wordreviewlist:'',
	      wordbundle: '',
	      setbundle:false,
	      userinfomation:'',
	      bundles:[],
	      valuelist:[],
	      noMoreData: false,
	      page: 1,
	      pagereview: 1,
	      formid: '',
	      index: 0


	  }

	  async onPullDownRefresh() {
        this.userinfomation = wepy.getStorageSync('userinfomini')
        let wordfinishlistResponse = await api.request({
        url: 'wordfinishlist',
        method: 'POST',
        data: {
            user_id: this.userinfomation.id

        }
        })

        if(wordfinishlistResponse.data.data){
        let tmphasIconList = wordfinishlistResponse.data.data.date
        this.hasIconList = tmphasIconList
        this.$apply() 

        }

          wepy.stopPullDownRefresh()
        }

	      methods = {
	      	tabClick (e) {
	      		this.sliderOffset = e.currentTarget.offsetLeft
	      		this.activeIndex = e.currentTarget.id
	      	},
	      	async deletebundle() {
	              // 删除确认
	              let res = await wepy.showModal({
	              	title: '确认删除',
	              	content: '您确认要删除吗',
	              	confirmText: '删除',
	              	cancelText: '取消'
	              })

	              // 用户点击取消后返回
	              if (!res.confirm) {
	              	return
	              }

	              // 调用接口删除话题
	              let deleteResponse = await api.authRequest({
	              	url: 'deletebundle',
	              	method: 'DELETE',
	              	data: {
	              		user_id: this.userinfomation.id,
	              		bundle_id: this.wordbundle.id,
	              	}

	              })

	              // 删除成功，给出提示
	              if (deleteResponse.statusCode === 204) {
	              	wepy.showToast({
	              		title: '删除成功',
	              		icon: 'success'
	              	})
	              	this.setbundle =true
	              	let bundlelistResponse = await api.request({
	              		url: 'bundlelist'
	              	})
	              	let setbundle = bundlelistResponse.data.level_bases
	              	let tmplist =[]
	              	let valuelist =[]
	              	console.log(setbundle)
	              	setbundle.forEach(function (newsitem) {
	                  //tmplist[newsitem.id] = newsitem.level_bases
	                  tmplist.push(newsitem.level_bases)
	                  valuelist.push(newsitem.id)
	                  
	              })
	              	this.bundles = tmplist
	              	this.valuelist = valuelist
	              	this.$apply() 
	              }
	          },



	          inputTyping(e){
	          	this.maxsize = e.detail.value
	          },

	          async updatebundle(e){

	              //console.log("user_id: " + this.userinfomation.id +'bundle_id'+ this.wordbundle.id + 'maxsize:'+ this.maxsize)
	              let updatebundleResponse = await api.request({
	              	url: 'updatebundle',
	              	method: 'POST',
	              	data: {
	              		user_id: this.userinfomation.id,
	              		bundle_id: this.wordbundle.id,
	              		maxsize: this.maxsize
	              	}
	              })
	              this.wordbundle = updatebundleResponse.data.data
	              this.maxsize = this.wordbundle.maxsize
	              let answerlistResponse = await api.request({
			    			url: 'answerlist',
			    			method: 'POST',
			    			data: {
			    				user_id: this.userinfomation.id

			    			}
				    		})

				    		if(answerlistResponse){
				    			this.answerlist = answerlistResponse.data
				    		}	

	              await this.getTopic()
				  await this.getRoots(1,true)
	              this.$apply() 

	          },
	          async bindPickerChange(e){
	          	this.userinfomation = wepy.getStorageSync('userinfomini')
	          	console.log("user_id: " + this.userinfomation.id +'level_base_id'+ this.valuelist[e.detail.value])
	          	try{
	          		let newbundleResponse = await api.request({
	          		url: 'newbundle',
	          		method: 'POST',
	          		data: {
	          			user_id: this.userinfomation.id,
	          			level_base_id: this.valuelist[e.detail.value],
	          		}
	          	})


	          	this.wordbundle = newbundleResponse.data.data
	          	this.maxsize = this.wordbundle.maxsize
	          	this.setbundle =false
	          }catch(err){

	          				 this.loggedIn = false
							 this.userInfo = null
							 this.setbundle =true
							 wepy.setStorageSync('userinfomini',"")

	          }
	          	console.log('picker发送选择改变，携带值为', e.detail.value)

	          	console.log('name : ', this.valuelist[e.detail.value])

	          	if (this.wordbundle.statusCode === 422) {
					         this.loggedIn = false
							 this.userInfo = null
							 this.setbundle =true
							 wepy.setStorageSync('userinfomini',"")
							 //his.$apply()
					        }

	          	
	          	this.$apply()
	          },

	          tip(e){
	          	if(this.closetip==false){
	          		this.closetip =true
	          	}else{
	          		this.closetip =false
	          	}
	          },
	          cigen(e){
	          	if(this.closecigen==false){
	          		this.closecigen =true
	          	}else{
	          		this.closecigen =false
	          	}

	          },
	          liju(e){
	          	if(this.closeliju==false){
	          		this.closeliju =true
	          	}else{
	          		this.closeliju =false
	          	}

	          },
	          async radioChange(e) {
	         	

	          	if(e.detail.value ==this.reviewitem.word_id){
	          		console.log('回答正常')
	          		this.explain_answer.forEach(function (v) {
		          		if(v.id == e.detail.value){
		          			v.checked = true
		          		}
	                    

	                    console.log("测试单选值 v.id" + v.checked)

                	});

	          		this.ShowExplain =true
	          		this.answertrue = true

	          		
			    	//console.log("fail")
			    	let reviewupdateResponse = await api.request({
						url: 'viewupdate',
						method: 'POST',
						data: {
							user_id: this.userinfomation.id,
							word_id: this.reviewitem.word_id,
						}
				})
			    this.wordpercentcount +=1 
			    	
			    }else{
			    	this.explain_answer.forEach(function (v) {
		          		v.checked = false
	                    
		          		console.log('回答错误')
	                    console.log("测试单选值 v.id" + v.checked)

                	});

			    	console.log(this.reviewdata)
			    	this.ShowExplain =true
			    	this.answertrue=false
			    }

			    
			    e.detail.class ="red"

			    this.$apply()
			    console.log('radio发生change事件，携带value值为：', e.detail.value)
			},

			async dancizhan(event){
				let dancizhan_id = event.currentTarget.dataset.path

				let res = await wepy.showModal({
	              	title: '确认',
	              	content: '以后我都不想看见它了？',
	              	confirmText: '确认',
	              	cancelText: '取消'
	              })

	              // 用户点击取消后返回
	              if (!res.confirm) {
	              	return
	              }

				let reviewupdateResponse = await api.request({
						url: 'dancizhan',
						method: 'POST',
						data: {
							user_id: this.userinfomation.id,
							word_id:  dancizhan_id
						}
					})
				this.wordpercentcount +=1 
				console.log('单词斩user_id'+ this.userinfomation.id + 'word_id'+ dancizhan_id);
				//this.nextreview(event)
				this.ShowExplain =false
				this.answertrue =false
				await this.getTopic()
	          },

			async nextreview(e){
				console.log('记录formId 开始');
		    	if(this.formid===''){
		    		this.formid = e.detail.formId;
		    		let formidResponse = await api.request({
		    			url: 'updateformid',
		    			method: 'POST',
		    			data: {
		    				user_id: this.userinfomation.id,
		    				formid: this.formid,
		    			}
		    		})
		    		console.log('更新记录formId');
		    		console.log(e.detail.formId);
		    		//console.log(riskupdateResponse);
		    	}

				this.animation.translate(-500, 0).step({ duration: 500 })
				this.animation.translate(0, 0).step({ duration: 500 })
				this.animationData = this.animation.export()
				this.ShowExplain =false
				this.answertrue =false
				if(this.reviewdata.length){

					let tmpdata =this.reviewdata.pop()
					this.reviewitem = tmpdata
					//this.autoplaymp3(tmpdata.voice[0].path)
					try{
		    				this.autoplaymp3(tmpdata.voice[0].path)
		    			}catch (err) {
			          
			        	}
					let tmpexplain =""
					for (let key in tmpdata.explain) {
						tmpexplain = tmpdata.explain[key]
						break
					}
					this.randanswer(tmpdata.word_id, tmpexplain)


				}else{

					if(this.words.length){
						let tmpdata =this.words.pop()
						this.currentdata = tmpdata
						this.wordsTwo.push(tmpdata)
						//this.autoplaymp3(tmpdata.voice[0].path)
						try{
		    				this.autoplaymp3(tmpdata.voice[0].path)
		    			}catch (err) {
			          
			        	}

						this.ShowReview =false
						this.ShowNewWord=true

						let riskupdateResponse = await api.request({
							url: 'riskupdate',
							method: 'POST',
							data: {
								user_id: this.userinfomation.id,
								word_id: this.currentdata.word_id,
							}
						})

					}else{
						await this.getTopic()
			    		//this.ShowReview =false
	    				//this.ShowNewWord=false
	    				
	    				console.log("这里应该重新加载")
	    				this.$apply()

			    		//console.log(this.wordsTwo)
			    	}

			    	this.$apply()

		    		//console.log(this.wordsTwo)
		    	}
		    	//console.log("fail")
		    	this.wordpercent = this.wordpercentcount/(this.wordnewwordcount *2 + this.wordreviewwordcount) * 100
		    	console.log("百分比: " + this.wordpercent)
		    	this.$apply()
		    	this.animationData=""

		    },

		    async nextword(e){
		    	console.log('记录formId 开始');
		    	if(this.formid===''){
		    		this.formid = e.detail.formId;
		    		let formidResponse = await api.request({
		    			url: 'updateformid',
		    			method: 'POST',
		    			data: {
		    				user_id: this.userinfomation.id,
		    				formid: this.formid,
		    			}
		    		})
		    		console.log('更新记录formId');
		    		console.log(e.detail.formId);
		    	}
		    	this.wordpercentcount +=1 
		    	this.wordpercent = this.wordpercentcount/(this.wordnewwordcount *2 + this.wordreviewwordcount) * 100
		    	this.animation.translate(-500, 0).step({ duration: 500 })
		    	this.animation.translate(0, 0).step({ duration: 500 })
		    	this.animationData = this.animation.export()

		    	if(this.words.length){
		    		let tmpdata =this.words.pop()
		    		this.currentdata = tmpdata
		    		//this.wordsTwo.push(tmpdata)
		    		try{
		    			this.autoplaymp3(tmpdata.voice[0].path)
		    		}catch (err) {
			          
			        	}
		    		

		    		//tmpdata.word_review.next_time = "一小时后需要复习"

		    		this.reviewdata.push(tmpdata)

		    		console.log(this.reviewdata)

		    		let riskupdateResponse = await api.request({
		    			url: 'riskupdate',
		    			method: 'POST',
		    			data: {
		    				user_id: this.userinfomation.id,
		    				word_id: this.currentdata.word_id,
		    			}
		    		})

		    		
		    		//console.log(this.currentdata.voice)
		    	}else{

		    		if(this.reviewdata.length){
		    			this.ShowReview =true
		    			this.ShowNewWord=false
		    			this.reviewdata.reverse()
		    			let tmpdata =this.reviewdata.pop()
		    			this.reviewitem = tmpdata
		    			try{
		    				this.autoplaymp3(tmpdata.voice[0].path)
		    			}catch (err) {
			          
			        	}
		    			
		    			let tmpexplain =""
		    			for (let key in tmpdata.explain) {
		    				tmpexplain = tmpdata.explain[key]
		    				break
		    			}
		    			this.randanswer(tmpdata.word_id, tmpexplain)


		    			this.$apply()

		    		}else{
		    			await this.getTopic()
		    			this.ShowReview =false
		    			this.ShowNewWord=false
		    		}

		    		//console.log(this.wordsTwo)
		    	}
		    	//console.log("fail")
		    	this.$apply()
		    	this.animationData=""

		    }
		}

		async getRoots(page = 1, reset = false){


				//新单词例表
			let wordrisklistResponse = await api.request({
				url: 'wordrisklist',
				data: {
					user_id: this.userinfomation.id,
					page: page
				}
			})

			let wordrisklist = wordrisklistResponse.data.data
			if(wordrisklist.length){
				this.wordrisklist = reset ? wordrisklist : this.wordrisklist.concat(wordrisklist)
				this.$apply()
			}
			
			//this.wordrisklist = wordrisklist
			

			let wordreviewlistResponse = await api.request({
				url: 'wordreviewlist',
				data: {
					user_id: this.userinfomation.id,
					page: page
				}
			})
			let wordreviewlist = wordreviewlistResponse.data.data
			this.wordreviewlist = reset ? wordreviewlist : this.wordreviewlist.concat(wordreviewlist)
			this.$apply()
			let pagination = wordreviewlistResponse.data.meta.pagination

	          //console.log(wordreviewlistResponse)
	          // 根据分页设置是否还有更多数据
	          if (pagination.current_page === pagination.total_pages) {
	          	//console.log("test2")
	          	this.noMoreData = true
	          }


	          if(this.wordbundle ===''){
		          	 let wordsetttingResponse = await api.request({
		          	url: 'wordsetting',
		          	data: {
		          		user_id: this.userinfomation.id
		          	}
		          })
		          let wordsettting = wordsetttingResponse
		          if(wordsettting.data.data){
		          	this.setbundle =false
		          	this.wordbundle = wordsettting.data.data
		          	this.maxsize = this.wordbundle.maxsize
		          }

		          	this.setbundle =true
		          	let bundlelistResponse = await api.request({
		          		url: 'bundlelist'
		          	})
		          	let setbundle = bundlelistResponse.data.level_bases
		          	let tmplist =[]
		          	let valuelist =[]
		          	console.log(setbundle)
		          	setbundle.forEach(function (newsitem) {
		              //tmplist[newsitem.id] = newsitem.level_bases
		              tmplist.push(newsitem.level_bases)
		              valuelist.push(newsitem.id)
		              
		          })
		          this.bundles = tmplist
		          this.valuelist = valuelist
		          

	          }
	         
	          
	          this.$apply()
	          

	      }

	        //自动播放单词发音
	        autoplaymp3(voicepath){
	        	let path="https://www.jciba.cn/uploads/voice/word/" + voicepath
	        	console.log('path' + path)
	        	this.innerAudioContext = wepy.createInnerAudioContext()
	        	this.innerAudioContext.autoplay = true
	        	this.innerAudioContext.obeyMuteSwitch = false 
	        	this.innerAudioContext.src = path
	        	this.innerAudioContext.onPlay(() => {
	        		console.log('开始播放')
	        	})

	        }

	        playmp3(event){
	        	let path="https://www.jciba.cn/uploads/voice/word/" + event.currentTarget.dataset.path

	        	this.innerAudioContext = wepy.createInnerAudioContext()
	        	this.innerAudioContext.autoplay = true
	        	this.innerAudioContext.obeyMuteSwitch = false 
	        	this.innerAudioContext.src = path
	        	this.innerAudioContext.onPlay(() => {
	        		console.log('开始播放')
	        	})

	        }

	        randomSort(a, b) {
	        	return Math.random() > 0.5 ? -1 : 1
	        }		


	        async randanswer(id, explain){
	        	if(this.answerlist.length ==false ){
		    		let answerlistResponse = await api.request({
				    			url: 'answerlist',
				    			method: 'POST',
				    			data: {
				    				user_id: this.userinfomation.id

				    			}
					    		})
					if(answerlistResponse){
					    		this.answerlist = answerlistResponse.data
					 }	
		    	}

	        	let explain_arr =[]
	        	explain_arr[0] = { "id" :id , "explain": explain, checked: false}
	        	explain_arr[1] = this.answerlist[Math.floor(Math.random()*this.answerlist.length)]
	        	explain_arr[2]  = this.answerlist[Math.floor(Math.random()*this.answerlist.length)]
	        	explain_arr[3]  = this.answerlist[Math.floor(Math.random()*this.answerlist.length)]

	        	this.explain_answer = explain_arr.sort(this.randomSort)
	        	this.$apply()
	        	console.log(explain_arr)
	        	console.log("explain_answer test")

	        }
	    // 获取单词数据
	    async getTopic(pagereview = 1, reset = false) {

	    	this.ShowReview =false
	    	this.ShowNewWord=false

	    	let animation = wepy.createAnimation({
	    		duration: 1000,
	    		timingFunction: 'ease',
	    	})

	    	this.animation = animation

	    

		   // this.animation.translate(-100, 0).step({ duration: 1000 })
	    	//this.animationData = this.animation.export()

	    	this.userinfomation = wepy.getStorageSync('userinfomini')
	    	if(this.userinfomation){
	    		this.loggedIn =true
	    		let newwordResponse = await api.request({
					url: 'newwords',
					method: 'POST',
					data: {
						user_id: this.userinfomation.id,
						page: pagereview
					}
				})
				//console.log(newwordResponse);
		  try{
					if(newwordResponse){
						this.words = newwordResponse.data.data
						if(this.wordnewwordcount == 0){
							this.wordnewwordcount = newwordResponse.data.meta.pagination.total;
						}
						

						if(this.words.length){
			          	//this.answerlist.concat(this.words.explain)
			          	this.ShowNewWord=true
			          	}

		     		}
		  }catch (err){

		  	this.ShowNewWord=false

		  }

		      let wordreviewResponse = await api.request({
		      	url: 'wordreview',
		      	method: 'POST',
		      	data: {
		      		user_id: this.userinfomation.id,
		      		page: pagereview

		      	}
		      })
		      if(wordreviewResponse){
		      	this.reviewdata = wordreviewResponse.data.data
		      	if(this.wordreviewwordcount == 0){
							this.wordreviewwordcount = wordreviewResponse.data.meta.pagination.total;
				}
		      	this.reviewdata.forEach(function (newsitem) {

		           	// newsitem.word_review.next_time = util.diffForJiyi(newsitem.word_review.status )
		           	if(newsitem.word_review.status == 1){
	           		newsitem.word_review.next_time="第一次复习，下次复习时间为一天后"
		           	}else if(newsitem.word_review.status ==2){
		           		newsitem.word_review.next_time="第二次复习, 下次复习时间为一天后"
		           	}else if(newsitem.word_review.status ==3){
		           		newsitem.word_review.next_time="第三次复习, 下次复习时间为两天后"
		           	}else if(newsitem.word_review.status ==4){
		           		newsitem.word_review.next_time="第四次复习，下次复习时间为两天后"
		           	}else if(newsitem.word_review.status ==5){
		           		newsitem.word_review.next_time="第五次复习， 下次复习时间为八天后"
		           	}else if(newsitem.word_review.status ==6){
		           		newsitem.word_review.next_time="第六次复习， 也是最后一次复习"
		           	}
		           	//newsitem.word_review.next_time = util.diffForJiyi(newsitem.word_review.status )
		           })
		      	if(this.reviewdata.length){
		    			//this.answerlist.concat(this.reviewdata.explain)
		    			this.ShowReview =true
		    			this.ShowNewWord=false
		    			

		    		}
		    		
		    	}
	    		//this.reviewdata = wordreviewResponse.data.data
	    		

	    		
	        //console.log(`缓存成功` + word)  

	      	//this.$apply()

	      	if(this.ShowReview){
	      		if(this.reviewdata.length){
	      			let tmpdata =this.reviewdata.pop()
	      			this.reviewitem = tmpdata
	      			//this.autoplaymp3(tmpdata.voice[0].path)
	      			try{
		    				this.autoplaymp3(tmpdata.voice[0].path)
		    			}catch (err) {
			          
			        	}


	    			//this.reviewitem.answer.
	    			let tmpexplain =""
	    			for (let key in tmpdata.explain) {
	    				tmpexplain = tmpdata.explain[key]
	    				break
	    			}
	    			this.randanswer(tmpdata.word_id, tmpexplain)
	    			/*
	    			let reviewupdateResponse = await api.request({
	    				url: 'viewupdate',
	    				method: 'POST',
	    				data: {
	    					user_id: this.userinfomation.id,
	    					word_id: this.reviewitem.word_id,
	    				}
	    			})
					*/
	    			this.$apply()
	    			//console.log(this.reviewitem)
	    		}
	    	}

	    	if(this.ShowNewWord){
	    		if(this.words.length){
	    			let tmpdata =this.words.pop()
	    			this.currentdata = tmpdata
	    			//this.autoplaymp3(tmpdata.voice[0].path)
	    			try{
		    				this.autoplaymp3(tmpdata.voice[0].path)
		    			}catch (err) {
			          
			        	}

	    		//tmpdata.word_review.next_time = "一小时后需要复习"

	    		this.reviewdata.push(tmpdata)
	      		//console.log(this.reviewdata)

	      		let riskupdateResponse = await api.request({
	      			url: 'riskupdate',
	      			method: 'POST',
	      			data: {
	      				user_id: this.userinfomation.id,
	      				word_id: this.currentdata.word_id,
	      			}
	      		})



		    		//console.log(tmpdata.voice[0].path)
		    		//console.log(tmpdata)
		    	}

		    	this.animation.translate(0, 0).step({ duration: 1000 })
		    	this.animationData = this.animation.export()

		    	//console.log("fail")
		    	this.$apply()
		    }

		    
	    	}else{
	    		let accessToken = wepy.getStorageSync('access_token')

				      // Token 存在则说明已登录
				      if (accessToken) {
				        // 测试 authRequest 接口
				        let userResponse = await api.authRequest('user')
				        this.userinfomation = userResponse.data
				        this.loggedIn = true
				        console.log('测试登录接口')
				        console.log(userResponse.data)
				        wepy.setStorageSync('userinfomini',userResponse.data)
				        this.$apply()
				    }

			}

		

			this.$apply()

	      //let words = wepy.getStorageSync(word) 设置缓存

	  }


	  async onShow(options) {
			//this.$invoke('getRoots')
			await this.getTopic()
			await this.getRoots(1,true)

	        this.$apply() 
	        /*
			if(this.ShowNewWord==false&& this.ShowReview==false){
				await this.getTopic()
				if(this.wordreviewlist.length ==false || this.wordrisklist.length ==false){
						await this.getRoots(1,true)
						//console.log("执行这里")
				}
					

			}
			*/


		}

	onShareAppMessage(res) {
      if (res.from === 'button') {
        // 来自页面内转发按钮
        console.log(res.target)
      }
      return {
        title: "我正在每天记单词，你也来试试！",
        path: 'pages/words/jidanci'
      }
    }	
	

		async onLoad(options) {
			let res = await wepy.getSystemInfo()
			this.wordpercent = 0
			this.wordpercentcount = 0
			this.wordnewwordcount = 0
			this.wordreviewwordcount = 0
			this.userinfomation = wepy.getStorageSync('userinfomini')

			try{
				if(this.userinfomation.id ==false){
					let accessToken = wepy.getStorageSync('access_token')

				      // Token 存在则说明已登录
				      if (accessToken) {
				        // 测试 authRequest 接口
				        let userResponse = await api.authRequest('user')
				        this.userinfomation = userResponse.data
				        this.loggedIn = true
				        console.log('测试登录接口')
				        console.log(userResponse.data)
				        wepy.setStorageSync('userinfomini',userResponse.data)
				        this.$apply()
				    }
				}

			}catch(err){


			}
			//await this.getTopic()
			


			this.sliderLeft = (res.windowWidth / this.tabs.length - sliderWidth) / 2
			this.sliderOffset = res.windowWidth / this.tabs.length * this.activeIndex




		}
	}
	</script>